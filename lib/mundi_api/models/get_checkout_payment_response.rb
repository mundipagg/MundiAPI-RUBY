# mundi_api
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

require 'date'
module MundiApi
  # Resposta das configurações de pagamento do checkout
  class GetCheckoutPaymentResponse < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # Valor em centavos
    # @return [Integer]
    attr_accessor :amount

    # Meio de pagamento padrão no checkout
    # @return [String]
    attr_accessor :default_payment_method

    # Url de redirecionamento de sucesso após o checkou
    # @return [String]
    attr_accessor :success_url

    # Url para pagamento usando o checkout
    # @return [String]
    attr_accessor :payment_url

    # Código da afiliação onde o pagamento será processado no gateway
    # @return [String]
    attr_accessor :gateway_affiliation_id

    # Meios de pagamento aceitos no checkout
    # @return [List of String]
    attr_accessor :accepted_payment_methods

    # Status do checkout
    # @return [String]
    attr_accessor :status

    # Pular tela de sucesso pós-pagamento?
    # @return [Boolean]
    attr_accessor :skip_checkout_success_page

    # Data de criação
    # @return [DateTime]
    attr_accessor :created_at

    # Data de atualização
    # @return [DateTime]
    attr_accessor :updated_at

    # Data de cancelamento
    # @return [DateTime]
    attr_accessor :canceled_at

    # Torna o objeto customer editável
    # @return [Boolean]
    attr_accessor :customer_editable

    # Torna o objeto customer editável
    # @return [Customer]
    attr_accessor :customer

    # Torna o objeto customer editável
    # @return [Billingaddress3]
    attr_accessor :billingaddress

    # Torna o objeto customer editável
    # @return [GetCheckoutCreditCardPaymentResponse]
    attr_accessor :credit_card

    # Torna o objeto customer editável
    # @return [GetCheckoutBoletoPaymentResponse]
    attr_accessor :boleto

    # Indica se o billing address poderá ser editado
    # @return [Boolean]
    attr_accessor :billing_address_editable

    # Indica se o billing address poderá ser editado
    # @return [Shipping]
    attr_accessor :shipping

    # Indica se possui entrega
    # @return [Boolean]
    attr_accessor :shippable

    # Data de fechamento
    # @return [DateTime]
    attr_accessor :closed_at

    # Data de expiração
    # @return [DateTime]
    attr_accessor :expires_at

    # Moeda
    # @return [String]
    attr_accessor :currency

    # Moeda
    # @return [GetCheckoutDebitCardPaymentResponse]
    attr_accessor :debit_card

    # Moeda
    # @return [BankTransfer]
    attr_accessor :bank_transfer

    # Accepted Brands
    # @return [List of String]
    attr_accessor :accepted_brands

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['amount'] = 'amount'
      @_hash['default_payment_method'] = 'default_payment_method'
      @_hash['success_url'] = 'success_url'
      @_hash['payment_url'] = 'payment_url'
      @_hash['gateway_affiliation_id'] = 'gateway_affiliation_id'
      @_hash['accepted_payment_methods'] = 'accepted_payment_methods'
      @_hash['status'] = 'status'
      @_hash['skip_checkout_success_page'] = 'skip_checkout_success_page'
      @_hash['created_at'] = 'created_at'
      @_hash['updated_at'] = 'updated_at'
      @_hash['canceled_at'] = 'canceled_at'
      @_hash['customer_editable'] = 'customer_editable'
      @_hash['customer'] = 'customer'
      @_hash['billingaddress'] = 'billingaddress'
      @_hash['credit_card'] = 'credit_card'
      @_hash['boleto'] = 'boleto'
      @_hash['billing_address_editable'] = 'billing_address_editable'
      @_hash['shipping'] = 'shipping'
      @_hash['shippable'] = 'shippable'
      @_hash['closed_at'] = 'closed_at'
      @_hash['expires_at'] = 'expires_at'
      @_hash['currency'] = 'currency'
      @_hash['debit_card'] = 'debit_card'
      @_hash['bank_transfer'] = 'bank_transfer'
      @_hash['accepted_brands'] = 'accepted_brands'
      @_hash
    end

    def initialize(id = nil,
                   default_payment_method = nil,
                   success_url = nil,
                   payment_url = nil,
                   gateway_affiliation_id = nil,
                   accepted_payment_methods = nil,
                   status = nil,
                   skip_checkout_success_page = nil,
                   created_at = nil,
                   updated_at = nil,
                   customer_editable = nil,
                   billingaddress = nil,
                   credit_card = nil,
                   boleto = nil,
                   billing_address_editable = nil,
                   shipping = nil,
                   shippable = nil,
                   currency = nil,
                   accepted_brands = nil,
                   amount = nil,
                   canceled_at = nil,
                   customer = nil,
                   closed_at = nil,
                   expires_at = nil,
                   debit_card = nil,
                   bank_transfer = nil)
      @id = id
      @amount = amount
      @default_payment_method = default_payment_method
      @success_url = success_url
      @payment_url = payment_url
      @gateway_affiliation_id = gateway_affiliation_id
      @accepted_payment_methods = accepted_payment_methods
      @status = status
      @skip_checkout_success_page = skip_checkout_success_page
      @created_at = created_at
      @updated_at = updated_at
      @canceled_at = canceled_at
      @customer_editable = customer_editable
      @customer = customer
      @billingaddress = billingaddress
      @credit_card = credit_card
      @boleto = boleto
      @billing_address_editable = billing_address_editable
      @shipping = shipping
      @shippable = shippable
      @closed_at = closed_at
      @expires_at = expires_at
      @currency = currency
      @debit_card = debit_card
      @bank_transfer = bank_transfer
      @accepted_brands = accepted_brands
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      default_payment_method = hash['default_payment_method']
      success_url = hash['success_url']
      payment_url = hash['payment_url']
      gateway_affiliation_id = hash['gateway_affiliation_id']
      accepted_payment_methods = hash['accepted_payment_methods']
      status = hash['status']
      skip_checkout_success_page = hash['skip_checkout_success_page']
      created_at = APIHelper.rfc3339(hash['created_at']) if hash['created_at']
      updated_at = APIHelper.rfc3339(hash['updated_at']) if hash['updated_at']
      customer_editable = hash['customer_editable']
      billingaddress = Billingaddress3.from_hash(hash['billingaddress']) if
        hash['billingaddress']
      if hash['credit_card']
        credit_card = GetCheckoutCreditCardPaymentResponse.from_hash(hash['credit_card'])
      end
      boleto = GetCheckoutBoletoPaymentResponse.from_hash(hash['boleto']) if
        hash['boleto']
      billing_address_editable = hash['billing_address_editable']
      shipping = Shipping.from_hash(hash['shipping']) if hash['shipping']
      shippable = hash['shippable']
      currency = hash['currency']
      accepted_brands = hash['accepted_brands']
      amount = hash['amount']
      canceled_at = APIHelper.rfc3339(hash['canceled_at']) if
        hash['canceled_at']
      customer = Customer.from_hash(hash['customer']) if hash['customer']
      closed_at = APIHelper.rfc3339(hash['closed_at']) if hash['closed_at']
      expires_at = APIHelper.rfc3339(hash['expires_at']) if hash['expires_at']
      if hash['debit_card']
        debit_card = GetCheckoutDebitCardPaymentResponse.from_hash(hash['debit_card'])
      end
      bank_transfer = BankTransfer.from_hash(hash['bank_transfer']) if
        hash['bank_transfer']

      # Create object from extracted values.
      GetCheckoutPaymentResponse.new(id,
                                     default_payment_method,
                                     success_url,
                                     payment_url,
                                     gateway_affiliation_id,
                                     accepted_payment_methods,
                                     status,
                                     skip_checkout_success_page,
                                     created_at,
                                     updated_at,
                                     customer_editable,
                                     billingaddress,
                                     credit_card,
                                     boleto,
                                     billing_address_editable,
                                     shipping,
                                     shippable,
                                     currency,
                                     accepted_brands,
                                     amount,
                                     canceled_at,
                                     customer,
                                     closed_at,
                                     expires_at,
                                     debit_card,
                                     bank_transfer)
    end
  end
end
