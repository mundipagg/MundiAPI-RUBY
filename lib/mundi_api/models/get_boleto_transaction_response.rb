# mundi_api
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

require 'date'
require_relative 'get_transaction_response'

module MundiApi
  # Response object for getting a boleto transaction
  class GetBoletoTransactionResponse < GetTransactionResponse
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :barcode

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :nosso_numero

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :bank

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :document_number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :instructions

    # TODO: Write general description for this method
    # @return [GetBillingAddressResponse]
    attr_accessor :billing_address

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :due_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :qr_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :line

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pdf_password

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :pdf

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :paid_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :paid_amount

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :credit_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['url'] = 'url'
      @_hash['barcode'] = 'barcode'
      @_hash['nosso_numero'] = 'nosso_numero'
      @_hash['bank'] = 'bank'
      @_hash['document_number'] = 'document_number'
      @_hash['instructions'] = 'instructions'
      @_hash['billing_address'] = 'billing_address'
      @_hash['due_at'] = 'due_at'
      @_hash['qr_code'] = 'qr_code'
      @_hash['line'] = 'line'
      @_hash['pdf_password'] = 'pdf_password'
      @_hash['pdf'] = 'pdf'
      @_hash['paid_at'] = 'paid_at'
      @_hash['paid_amount'] = 'paid_amount'
      @_hash['type'] = 'type'
      @_hash['credit_at'] = 'credit_at'
      @_hash = super().merge(@_hash)
      @_hash
    end

    def initialize(url = nil,
                   barcode = nil,
                   nosso_numero = nil,
                   bank = nil,
                   document_number = nil,
                   instructions = nil,
                   billing_address = nil,
                   qr_code = nil,
                   line = nil,
                   pdf_password = nil,
                   pdf = nil,
                   paid_amount = nil,
                   type = nil,
                   gateway_id = nil,
                   amount = nil,
                   status = nil,
                   success = nil,
                   created_at = nil,
                   updated_at = nil,
                   attempt_count = nil,
                   max_attempts = nil,
                   splits = nil,
                   id = nil,
                   gateway_response = nil,
                   antifraud_response = nil,
                   split = nil,
                   due_at = nil,
                   paid_at = nil,
                   credit_at = nil,
                   next_attempt = nil,
                   transaction_type = nil,
                   metadata = nil)
      @url = url
      @barcode = barcode
      @nosso_numero = nosso_numero
      @bank = bank
      @document_number = document_number
      @instructions = instructions
      @billing_address = billing_address
      @due_at = due_at
      @qr_code = qr_code
      @line = line
      @pdf_password = pdf_password
      @pdf = pdf
      @paid_at = paid_at
      @paid_amount = paid_amount
      @type = type
      @credit_at = credit_at

      # Call the constructor of the base class
      super(gateway_id,
            amount,
            status,
            success,
            created_at,
            updated_at,
            attempt_count,
            max_attempts,
            splits,
            id,
            gateway_response,
            antifraud_response,
            split,
            next_attempt,
            transaction_type,
            metadata)
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      url = hash['url']
      barcode = hash['barcode']
      nosso_numero = hash['nosso_numero']
      bank = hash['bank']
      document_number = hash['document_number']
      instructions = hash['instructions']
      if hash['billing_address']
        billing_address = GetBillingAddressResponse.from_hash(hash['billing_address'])
      end
      qr_code = hash['qr_code']
      line = hash['line']
      pdf_password = hash['pdf_password']
      pdf = hash['pdf']
      paid_amount = hash['paid_amount']
      type = hash['type']
      gateway_id = hash['gateway_id']
      amount = hash['amount']
      status = hash['status']
      success = hash['success']
      created_at = APIHelper.rfc3339(hash['created_at']) if hash['created_at']
      updated_at = APIHelper.rfc3339(hash['updated_at']) if hash['updated_at']
      attempt_count = hash['attempt_count']
      max_attempts = hash['max_attempts']
      # Parameter is an array, so we need to iterate through it
      splits = nil
      unless hash['splits'].nil?
        splits = []
        hash['splits'].each do |structure|
          splits << (GetSplitResponse.from_hash(structure) if structure)
        end
      end
      id = hash['id']
      if hash['gateway_response']
        gateway_response = GetGatewayResponseResponse.from_hash(hash['gateway_response'])
      end
      if hash['antifraud_response']
        antifraud_response = GetAntifraudResponse.from_hash(hash['antifraud_response'])
      end
      # Parameter is an array, so we need to iterate through it
      split = nil
      unless hash['split'].nil?
        split = []
        hash['split'].each do |structure|
          split << (GetSplitResponse.from_hash(structure) if structure)
        end
      end
      due_at = APIHelper.rfc3339(hash['due_at']) if hash['due_at']
      paid_at = APIHelper.rfc3339(hash['paid_at']) if hash['paid_at']
      credit_at = APIHelper.rfc3339(hash['credit_at']) if hash['credit_at']
      next_attempt = APIHelper.rfc3339(hash['next_attempt']) if
        hash['next_attempt']
      transaction_type = hash['transaction_type']
      metadata = hash['metadata']

      # Create object from extracted values.
      GetBoletoTransactionResponse.new(url,
                                       barcode,
                                       nosso_numero,
                                       bank,
                                       document_number,
                                       instructions,
                                       billing_address,
                                       qr_code,
                                       line,
                                       pdf_password,
                                       pdf,
                                       paid_amount,
                                       type,
                                       gateway_id,
                                       amount,
                                       status,
                                       success,
                                       created_at,
                                       updated_at,
                                       attempt_count,
                                       max_attempts,
                                       splits,
                                       id,
                                       gateway_response,
                                       antifraud_response,
                                       split,
                                       due_at,
                                       paid_at,
                                       credit_at,
                                       next_attempt,
                                       transaction_type,
                                       metadata)
    end
  end
end
