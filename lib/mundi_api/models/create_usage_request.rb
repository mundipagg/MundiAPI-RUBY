# mundi_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MundiApi
  # Request for creating a usage
  class CreateUsageRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :quantity

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :used_at

    # Identification code in the client system
    # @return [String]
    attr_accessor :code

    # identification group in the client system
    # @return [String]
    attr_accessor :group

    # Field used in item scheme type 'Percent'
    # @return [Integer]
    attr_accessor :amount

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['quantity'] = 'quantity'
      @_hash['description'] = 'description'
      @_hash['used_at'] = 'used_at'
      @_hash['code'] = 'code'
      @_hash['group'] = 'group'
      @_hash['amount'] = 'amount'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        code
        group
        amount
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(quantity = nil,
                   description = nil,
                   used_at = nil,
                   code = SKIP,
                   group = SKIP,
                   amount = SKIP)
      @quantity = quantity
      @description = description
      @used_at = used_at
      @code = code unless code == SKIP
      @group = group unless group == SKIP
      @amount = amount unless amount == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      quantity = hash.key?('quantity') ? hash['quantity'] : nil
      description = hash.key?('description') ? hash['description'] : nil
      used_at = if hash.key?('used_at')
                  (DateTimeHelper.from_rfc3339(hash['used_at']) if hash['used_at'])
                end
      code = hash.key?('code') ? hash['code'] : SKIP
      group = hash.key?('group') ? hash['group'] : SKIP
      amount = hash.key?('amount') ? hash['amount'] : SKIP

      # Create object from extracted values.
      CreateUsageRequest.new(quantity,
                             description,
                             used_at,
                             code,
                             group,
                             amount)
    end

    def to_used_at
      DateTimeHelper.to_rfc3339(used_at)
    end
  end
end
