# mundi_api
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

require 'date'
module MundiApi
  # Response object for getting an Address
  class GetAddressResponse < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :street

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :number

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :complement

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :zip_code

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :neighborhood

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :city

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :state

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :country

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :updated_at

    # TODO: Write general description for this method
    # @return [Customer]
    attr_accessor :customer

    # TODO: Write general description for this method
    # @return [Array<String, String>]
    attr_accessor :metadata

    # Line 1 for address
    # @return [String]
    attr_accessor :line_1

    # Line 2 for address
    # @return [String]
    attr_accessor :line_2

    # Line 2 for address
    # @return [DateTime]
    attr_accessor :deleted_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['street'] = 'street'
      @_hash['number'] = 'number'
      @_hash['complement'] = 'complement'
      @_hash['zip_code'] = 'zip_code'
      @_hash['neighborhood'] = 'neighborhood'
      @_hash['city'] = 'city'
      @_hash['state'] = 'state'
      @_hash['country'] = 'country'
      @_hash['status'] = 'status'
      @_hash['created_at'] = 'created_at'
      @_hash['updated_at'] = 'updated_at'
      @_hash['customer'] = 'customer'
      @_hash['metadata'] = 'metadata'
      @_hash['line_1'] = 'line_1'
      @_hash['line_2'] = 'line_2'
      @_hash['deleted_at'] = 'deleted_at'
      @_hash
    end

    def initialize(id = nil,
                   street = nil,
                   number = nil,
                   complement = nil,
                   zip_code = nil,
                   neighborhood = nil,
                   city = nil,
                   state = nil,
                   country = nil,
                   status = nil,
                   created_at = nil,
                   updated_at = nil,
                   metadata = nil,
                   line_1 = nil,
                   line_2 = nil,
                   customer = nil,
                   deleted_at = nil)
      @id = id
      @street = street
      @number = number
      @complement = complement
      @zip_code = zip_code
      @neighborhood = neighborhood
      @city = city
      @state = state
      @country = country
      @status = status
      @created_at = created_at
      @updated_at = updated_at
      @customer = customer
      @metadata = metadata
      @line_1 = line_1
      @line_2 = line_2
      @deleted_at = deleted_at
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash['id']
      street = hash['street']
      number = hash['number']
      complement = hash['complement']
      zip_code = hash['zip_code']
      neighborhood = hash['neighborhood']
      city = hash['city']
      state = hash['state']
      country = hash['country']
      status = hash['status']
      created_at = APIHelper.rfc3339(hash['created_at']) if hash['created_at']
      updated_at = APIHelper.rfc3339(hash['updated_at']) if hash['updated_at']
      metadata = hash['metadata']
      line_1 = hash['line_1']
      line_2 = hash['line_2']
      customer = Customer.from_hash(hash['customer']) if hash['customer']
      deleted_at = APIHelper.rfc3339(hash['deleted_at']) if hash['deleted_at']

      # Create object from extracted values.
      GetAddressResponse.new(id,
                             street,
                             number,
                             complement,
                             zip_code,
                             neighborhood,
                             city,
                             state,
                             country,
                             status,
                             created_at,
                             updated_at,
                             metadata,
                             line_1,
                             line_2,
                             customer,
                             deleted_at)
    end
  end
end
