# mundi_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MundiApi
  # GetSubscriptionItemResponse Model.
  class GetSubscriptionItemResponse < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :updated_at

    # TODO: Write general description for this method
    # @return [GetPricingSchemeResponse]
    attr_accessor :pricing_scheme

    # TODO: Write general description for this method
    # @return [List of GetDiscountResponse]
    attr_accessor :discounts

    # TODO: Write general description for this method
    # @return [List of GetIncrementResponse]
    attr_accessor :increments

    # TODO: Write general description for this method
    # @return [GetSubscriptionResponse]
    attr_accessor :subscription

    # Item name
    # @return [String]
    attr_accessor :name

    # Item name
    # @return [Integer]
    attr_accessor :quantity

    # Item name
    # @return [Integer]
    attr_accessor :cycles

    # Item name
    # @return [DateTime]
    attr_accessor :deleted_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['description'] = 'description'
      @_hash['status'] = 'status'
      @_hash['created_at'] = 'created_at'
      @_hash['updated_at'] = 'updated_at'
      @_hash['pricing_scheme'] = 'pricing_scheme'
      @_hash['discounts'] = 'discounts'
      @_hash['increments'] = 'increments'
      @_hash['subscription'] = 'subscription'
      @_hash['name'] = 'name'
      @_hash['quantity'] = 'quantity'
      @_hash['cycles'] = 'cycles'
      @_hash['deleted_at'] = 'deleted_at'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        quantity
        cycles
        deleted_at
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil,
                   description = nil,
                   status = nil,
                   created_at = nil,
                   updated_at = nil,
                   pricing_scheme = nil,
                   discounts = nil,
                   increments = nil,
                   subscription = nil,
                   name = nil,
                   quantity = SKIP,
                   cycles = SKIP,
                   deleted_at = SKIP)
      @id = id
      @description = description
      @status = status
      @created_at = created_at
      @updated_at = updated_at
      @pricing_scheme = pricing_scheme
      @discounts = discounts
      @increments = increments
      @subscription = subscription
      @name = name
      @quantity = quantity unless quantity == SKIP
      @cycles = cycles unless cycles == SKIP
      @deleted_at = deleted_at unless deleted_at == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      description = hash.key?('description') ? hash['description'] : nil
      status = hash.key?('status') ? hash['status'] : nil
      created_at = if hash.key?('created_at')
                     (DateTimeHelper.from_rfc3339(hash['created_at']) if hash['created_at'])
                   end
      updated_at = if hash.key?('updated_at')
                     (DateTimeHelper.from_rfc3339(hash['updated_at']) if hash['updated_at'])
                   end
      pricing_scheme = GetPricingSchemeResponse.from_hash(hash['pricing_scheme']) if
        hash['pricing_scheme']
      # Parameter is an array, so we need to iterate through it
      discounts = nil
      unless hash['discounts'].nil?
        discounts = []
        hash['discounts'].each do |structure|
          discounts << (GetDiscountResponse.from_hash(structure) if structure)
        end
      end

      discounts = nil unless hash.key?('discounts')
      # Parameter is an array, so we need to iterate through it
      increments = nil
      unless hash['increments'].nil?
        increments = []
        hash['increments'].each do |structure|
          increments << (GetIncrementResponse.from_hash(structure) if structure)
        end
      end

      increments = nil unless hash.key?('increments')
      subscription = GetSubscriptionResponse.from_hash(hash['subscription']) if
        hash['subscription']
      name = hash.key?('name') ? hash['name'] : nil
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      cycles = hash.key?('cycles') ? hash['cycles'] : SKIP
      deleted_at = if hash.key?('deleted_at')
                     (DateTimeHelper.from_rfc3339(hash['deleted_at']) if hash['deleted_at'])
                   else
                     SKIP
                   end

      # Create object from extracted values.
      GetSubscriptionItemResponse.new(id,
                                      description,
                                      status,
                                      created_at,
                                      updated_at,
                                      pricing_scheme,
                                      discounts,
                                      increments,
                                      subscription,
                                      name,
                                      quantity,
                                      cycles,
                                      deleted_at)
    end

    def to_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    def to_updated_at
      DateTimeHelper.to_rfc3339(updated_at)
    end

    def to_deleted_at
      DateTimeHelper.to_rfc3339(deleted_at)
    end
  end
end
