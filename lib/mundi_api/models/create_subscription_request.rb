# mundi_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module MundiApi
  # Request for creating a subcription
  class CreateSubscriptionRequest < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Customer
    # @return [CreateCustomerRequest]
    attr_accessor :customer

    # Card
    # @return [CreateCardRequest]
    attr_accessor :card

    # Subscription code
    # @return [String]
    attr_accessor :code

    # Payment method
    # @return [String]
    attr_accessor :payment_method

    # Billing type
    # @return [String]
    attr_accessor :billing_type

    # Statement descriptor for credit card subscriptions
    # @return [String]
    attr_accessor :statement_descriptor

    # Subscription description
    # @return [String]
    attr_accessor :description

    # Currency
    # @return [String]
    attr_accessor :currency

    # Interval
    # @return [String]
    attr_accessor :interval

    # Interval count
    # @return [Integer]
    attr_accessor :interval_count

    # Subscription pricing scheme
    # @return [CreatePricingSchemeRequest]
    attr_accessor :pricing_scheme

    # Subscription items
    # @return [List of CreateSubscriptionItemRequest]
    attr_accessor :items

    # Shipping
    # @return [CreateShippingRequest]
    attr_accessor :shipping

    # Discounts
    # @return [List of CreateDiscountRequest]
    attr_accessor :discounts

    # Metadata
    # @return [Hash of String]
    attr_accessor :metadata

    # Setup data
    # @return [CreateSetupRequest]
    attr_accessor :setup

    # Plan id
    # @return [String]
    attr_accessor :plan_id

    # Customer id
    # @return [String]
    attr_accessor :customer_id

    # Card id
    # @return [String]
    attr_accessor :card_id

    # Billing day
    # @return [Integer]
    attr_accessor :billing_day

    # Number of installments
    # @return [Integer]
    attr_accessor :installments

    # Subscription start date
    # @return [DateTime]
    attr_accessor :start_at

    # Subscription minimum price
    # @return [Integer]
    attr_accessor :minimum_price

    # Number of cycles
    # @return [Integer]
    attr_accessor :cycles

    # Card token
    # @return [String]
    attr_accessor :card_token

    # Gateway Affiliation code
    # @return [String]
    attr_accessor :gateway_affiliation_id

    # Quantity
    # @return [Integer]
    attr_accessor :quantity

    # Days until boleto expires
    # @return [Integer]
    attr_accessor :boleto_due_days

    # Increments
    # @return [List of CreateIncrementRequest]
    attr_accessor :increments

    # Increments
    # @return [CreatePeriodRequest]
    attr_accessor :period

    # SubMerchant
    # @return [CreateSubMerchantRequest]
    attr_accessor :submerchant

    # Subscription's split
    # @return [CreateSubscriptionSplitRequest]
    attr_accessor :split

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['customer'] = 'customer'
      @_hash['card'] = 'card'
      @_hash['code'] = 'code'
      @_hash['payment_method'] = 'payment_method'
      @_hash['billing_type'] = 'billing_type'
      @_hash['statement_descriptor'] = 'statement_descriptor'
      @_hash['description'] = 'description'
      @_hash['currency'] = 'currency'
      @_hash['interval'] = 'interval'
      @_hash['interval_count'] = 'interval_count'
      @_hash['pricing_scheme'] = 'pricing_scheme'
      @_hash['items'] = 'items'
      @_hash['shipping'] = 'shipping'
      @_hash['discounts'] = 'discounts'
      @_hash['metadata'] = 'metadata'
      @_hash['setup'] = 'setup'
      @_hash['plan_id'] = 'plan_id'
      @_hash['customer_id'] = 'customer_id'
      @_hash['card_id'] = 'card_id'
      @_hash['billing_day'] = 'billing_day'
      @_hash['installments'] = 'installments'
      @_hash['start_at'] = 'start_at'
      @_hash['minimum_price'] = 'minimum_price'
      @_hash['cycles'] = 'cycles'
      @_hash['card_token'] = 'card_token'
      @_hash['gateway_affiliation_id'] = 'gateway_affiliation_id'
      @_hash['quantity'] = 'quantity'
      @_hash['boleto_due_days'] = 'boleto_due_days'
      @_hash['increments'] = 'increments'
      @_hash['period'] = 'period'
      @_hash['submerchant'] = 'submerchant'
      @_hash['split'] = 'split'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        plan_id
        customer_id
        card_id
        billing_day
        installments
        start_at
        minimum_price
        cycles
        card_token
        gateway_affiliation_id
        quantity
        boleto_due_days
        period
        submerchant
        split
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(customer = nil,
                   card = nil,
                   code = nil,
                   payment_method = nil,
                   billing_type = nil,
                   statement_descriptor = nil,
                   description = nil,
                   currency = nil,
                   interval = nil,
                   interval_count = nil,
                   pricing_scheme = nil,
                   items = nil,
                   shipping = nil,
                   discounts = nil,
                   metadata = nil,
                   setup = nil,
                   increments = nil,
                   plan_id = SKIP,
                   customer_id = SKIP,
                   card_id = SKIP,
                   billing_day = SKIP,
                   installments = SKIP,
                   start_at = SKIP,
                   minimum_price = SKIP,
                   cycles = SKIP,
                   card_token = SKIP,
                   gateway_affiliation_id = SKIP,
                   quantity = SKIP,
                   boleto_due_days = SKIP,
                   period = SKIP,
                   submerchant = SKIP,
                   split = SKIP)
      @customer = customer
      @card = card
      @code = code
      @payment_method = payment_method
      @billing_type = billing_type
      @statement_descriptor = statement_descriptor
      @description = description
      @currency = currency
      @interval = interval
      @interval_count = interval_count
      @pricing_scheme = pricing_scheme
      @items = items
      @shipping = shipping
      @discounts = discounts
      @metadata = metadata
      @setup = setup
      @plan_id = plan_id unless plan_id == SKIP
      @customer_id = customer_id unless customer_id == SKIP
      @card_id = card_id unless card_id == SKIP
      @billing_day = billing_day unless billing_day == SKIP
      @installments = installments unless installments == SKIP
      @start_at = start_at unless start_at == SKIP
      @minimum_price = minimum_price unless minimum_price == SKIP
      @cycles = cycles unless cycles == SKIP
      @card_token = card_token unless card_token == SKIP
      @gateway_affiliation_id = gateway_affiliation_id unless gateway_affiliation_id == SKIP
      @quantity = quantity unless quantity == SKIP
      @boleto_due_days = boleto_due_days unless boleto_due_days == SKIP
      @increments = increments
      @period = period unless period == SKIP
      @submerchant = submerchant unless submerchant == SKIP
      @split = split unless split == SKIP
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      customer = CreateCustomerRequest.from_hash(hash['customer']) if hash['customer']
      card = CreateCardRequest.from_hash(hash['card']) if hash['card']
      code = hash.key?('code') ? hash['code'] : nil
      payment_method =
        hash.key?('payment_method') ? hash['payment_method'] : nil
      billing_type = hash.key?('billing_type') ? hash['billing_type'] : nil
      statement_descriptor =
        hash.key?('statement_descriptor') ? hash['statement_descriptor'] : nil
      description = hash.key?('description') ? hash['description'] : nil
      currency = hash.key?('currency') ? hash['currency'] : nil
      interval = hash.key?('interval') ? hash['interval'] : nil
      interval_count =
        hash.key?('interval_count') ? hash['interval_count'] : nil
      pricing_scheme = CreatePricingSchemeRequest.from_hash(hash['pricing_scheme']) if
        hash['pricing_scheme']
      # Parameter is an array, so we need to iterate through it
      items = nil
      unless hash['items'].nil?
        items = []
        hash['items'].each do |structure|
          items << (CreateSubscriptionItemRequest.from_hash(structure) if structure)
        end
      end

      items = nil unless hash.key?('items')
      shipping = CreateShippingRequest.from_hash(hash['shipping']) if hash['shipping']
      # Parameter is an array, so we need to iterate through it
      discounts = nil
      unless hash['discounts'].nil?
        discounts = []
        hash['discounts'].each do |structure|
          discounts << (CreateDiscountRequest.from_hash(structure) if structure)
        end
      end

      discounts = nil unless hash.key?('discounts')
      metadata = hash.key?('metadata') ? hash['metadata'] : nil
      setup = CreateSetupRequest.from_hash(hash['setup']) if hash['setup']
      # Parameter is an array, so we need to iterate through it
      increments = nil
      unless hash['increments'].nil?
        increments = []
        hash['increments'].each do |structure|
          increments << (CreateIncrementRequest.from_hash(structure) if structure)
        end
      end

      increments = nil unless hash.key?('increments')
      plan_id = hash.key?('plan_id') ? hash['plan_id'] : SKIP
      customer_id = hash.key?('customer_id') ? hash['customer_id'] : SKIP
      card_id = hash.key?('card_id') ? hash['card_id'] : SKIP
      billing_day = hash.key?('billing_day') ? hash['billing_day'] : SKIP
      installments = hash.key?('installments') ? hash['installments'] : SKIP
      start_at = if hash.key?('start_at')
                   (DateTimeHelper.from_rfc3339(hash['start_at']) if hash['start_at'])
                 else
                   SKIP
                 end
      minimum_price = hash.key?('minimum_price') ? hash['minimum_price'] : SKIP
      cycles = hash.key?('cycles') ? hash['cycles'] : SKIP
      card_token = hash.key?('card_token') ? hash['card_token'] : SKIP
      gateway_affiliation_id =
        hash.key?('gateway_affiliation_id') ? hash['gateway_affiliation_id'] : SKIP
      quantity = hash.key?('quantity') ? hash['quantity'] : SKIP
      boleto_due_days =
        hash.key?('boleto_due_days') ? hash['boleto_due_days'] : SKIP
      period = CreatePeriodRequest.from_hash(hash['period']) if hash['period']
      submerchant = CreateSubMerchantRequest.from_hash(hash['submerchant']) if hash['submerchant']
      split = CreateSubscriptionSplitRequest.from_hash(hash['split']) if hash['split']

      # Create object from extracted values.
      CreateSubscriptionRequest.new(customer,
                                    card,
                                    code,
                                    payment_method,
                                    billing_type,
                                    statement_descriptor,
                                    description,
                                    currency,
                                    interval,
                                    interval_count,
                                    pricing_scheme,
                                    items,
                                    shipping,
                                    discounts,
                                    metadata,
                                    setup,
                                    increments,
                                    plan_id,
                                    customer_id,
                                    card_id,
                                    billing_day,
                                    installments,
                                    start_at,
                                    minimum_price,
                                    cycles,
                                    card_token,
                                    gateway_affiliation_id,
                                    quantity,
                                    boleto_due_days,
                                    period,
                                    submerchant,
                                    split)
    end

    def to_start_at
      DateTimeHelper.to_rfc3339(start_at)
    end
  end
end
