# mundi_api
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module MundiApi
  # InvoicesController
  class InvoicesController < BaseController
    @instance = InvoicesController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Create an Invoice
    # @param [String] subscription_id Required parameter: Subscription Id
    # @param [String] cycle_id Required parameter: Cycle Id
    # @param [String] idempotency_key Optional parameter: Example:
    # @param [SubscriptionsCyclesPayRequest] body Optional parameter: Example:
    # @return SubscriptionsCyclesPayResponse response from the API call
    def create_invoice(subscription_id,
                       cycle_id,
                       idempotency_key = nil,
                       body = nil)
      # Prepare query url.
      _path_url = '/subscriptions/{subscription_id}/cycles/{cycle_id}/pay'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'subscription_id' => subscription_id,
        'cycle_id' => cycle_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json',
        'idempotency-key' => idempotency_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorException.new(
          'Invalid request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorException.new(
          'Invalid API key',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'An informed resource was not found',
          _context
        )
      elsif _context.response.status_code == 412
        raise ErrorException.new(
          'Business validation error',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorException.new(
          'Contract validation error',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorException.new(
          'Internal server error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SubscriptionsCyclesPayResponse.from_hash(decoded)
    end

    # GetPartialInvoice
    # @param [String] subscription_id Required parameter: Subscription Id
    # @return SubscriptionsPartialInvoiceResponse response from the API call
    def get_partial_invoice(subscription_id)
      # Prepare query url.
      _path_url = '/subscriptions/{subscription_id}/partial-invoice'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'subscription_id' => subscription_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorException.new(
          'Invalid request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorException.new(
          'Invalid API key',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'An informed resource was not found',
          _context
        )
      elsif _context.response.status_code == 412
        raise ErrorException.new(
          'Business validation error',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorException.new(
          'Contract validation error',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorException.new(
          'Internal server error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      SubscriptionsPartialInvoiceResponse.from_hash(decoded)
    end

    # Cancels an invoice
    # @param [String] invoice_id Required parameter: Invoice id
    # @param [String] idempotency_key Optional parameter: Example:
    # @return InvoicesResponse response from the API call
    def cancel_invoice(invoice_id,
                       idempotency_key = nil)
      # Prepare query url.
      _path_url = '/invoices/{invoice_id}'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'invoice_id' => invoice_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'idempotency-key' => idempotency_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorException.new(
          'Invalid request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorException.new(
          'Invalid API key',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'An informed resource was not found',
          _context
        )
      elsif _context.response.status_code == 412
        raise ErrorException.new(
          'Business validation error',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorException.new(
          'Contract validation error',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorException.new(
          'Internal server error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      InvoicesResponse.from_hash(decoded)
    end

    # Updates the metadata from an invoice
    # @param [String] invoice_id Required parameter: The invoice id
    # @param [InvoicesMetadataRequest] body Required parameter: Request for
    # updating the invoice metadata
    # @param [String] idempotency_key Optional parameter: Example:
    # @return InvoicesMetadataResponse response from the API call
    def update_invoice_metadata(invoice_id,
                                body,
                                idempotency_key = nil)
      # Prepare query url.
      _path_url = '/invoices/{invoice_id}/metadata'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'invoice_id' => invoice_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json',
        'idempotency-key' => idempotency_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorException.new(
          'Invalid request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorException.new(
          'Invalid API key',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'An informed resource was not found',
          _context
        )
      elsif _context.response.status_code == 412
        raise ErrorException.new(
          'Business validation error',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorException.new(
          'Contract validation error',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorException.new(
          'Internal server error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      InvoicesMetadataResponse.from_hash(decoded)
    end

    # Updates the status from an invoice
    # @param [String] invoice_id Required parameter: Invoice Id
    # @param [UpdateCurrentCycleStatusRequest] body Required parameter: Request
    # for updating an invoice's status
    # @param [String] idempotency_key Optional parameter: Example:
    # @return InvoicesStatusResponse response from the API call
    def update_invoice_status(invoice_id,
                              body,
                              idempotency_key = nil)
      # Prepare query url.
      _path_url = '/invoices/{invoice_id}/status'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'invoice_id' => invoice_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'Content-Type' => 'application/json',
        'idempotency-key' => idempotency_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorException.new(
          'Invalid request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorException.new(
          'Invalid API key',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'An informed resource was not found',
          _context
        )
      elsif _context.response.status_code == 412
        raise ErrorException.new(
          'Business validation error',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorException.new(
          'Contract validation error',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorException.new(
          'Internal server error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      InvoicesStatusResponse.from_hash(decoded)
    end

    # Gets an invoice
    # @param [String] invoice_id Required parameter: Invoice Id
    # @return InvoicesResponse response from the API call
    def get_invoice(invoice_id)
      # Prepare query url.
      _path_url = '/invoices/{invoice_id}'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'invoice_id' => invoice_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorException.new(
          'Invalid request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorException.new(
          'Invalid API key',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'An informed resource was not found',
          _context
        )
      elsif _context.response.status_code == 412
        raise ErrorException.new(
          'Business validation error',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorException.new(
          'Contract validation error',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorException.new(
          'Internal server error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      InvoicesResponse.from_hash(decoded)
    end

    # Gets all invoices
    # @param [Integer] page Optional parameter: Page number
    # @param [Integer] size Optional parameter: Page size
    # @param [String] code Optional parameter: Filter for Invoice's code
    # @param [String] customer_id Optional parameter: Filter for Invoice's
    # customer id
    # @param [String] subscription_id Optional parameter: Filter for Invoice's
    # subscription id
    # @param [DateTime] created_since Optional parameter: Filter for Invoice's
    # creation date start range
    # @param [DateTime] created_until Optional parameter: Filter for Invoices
    # creation date end range
    # @param [String] status Optional parameter: Filter for Invoice's status
    # @param [DateTime] due_since Optional parameter: Filter for Invoice's due
    # date start range
    # @param [DateTime] due_until Optional parameter: Filter for Invoice's due
    # date end range
    # @param [String] customer_document Optional parameter: Fillter for
    # invoice's document
    # @return InvoicesResponse2 response from the API call
    def get_invoices(page = nil,
                     size = nil,
                     code = nil,
                     customer_id = nil,
                     subscription_id = nil,
                     created_since = nil,
                     created_until = nil,
                     status = nil,
                     due_since = nil,
                     due_until = nil,
                     customer_document = nil)
      # Prepare query url.
      _path_url = '/invoices'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page' => page,
          'size' => size,
          'code' => code,
          'customer_id' => customer_id,
          'subscription_id' => subscription_id,
          'created_since' => created_since,
          'created_until' => created_until,
          'status' => status,
          'due_since' => due_since,
          'due_until' => due_until,
          'customer_document' => customer_document
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ErrorException.new(
          'Invalid request',
          _context
        )
      elsif _context.response.status_code == 401
        raise ErrorException.new(
          'Invalid API key',
          _context
        )
      elsif _context.response.status_code == 404
        raise ErrorException.new(
          'An informed resource was not found',
          _context
        )
      elsif _context.response.status_code == 412
        raise ErrorException.new(
          'Business validation error',
          _context
        )
      elsif _context.response.status_code == 422
        raise ErrorException.new(
          'Contract validation error',
          _context
        )
      elsif _context.response.status_code == 500
        raise ErrorException.new(
          'Internal server error',
          _context
        )
      end
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      InvoicesResponse2.from_hash(decoded)
    end
  end
end
