# mundi_api
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module MundiApi
  # TransfersController
  class TransfersController < BaseController
    # TODO: type endpoint description here
    # @param [CreateTransfer] request Required parameter: Example:
    # @return GetTransfer response from the API call
    def create_transfer(request)
      # Prepare query url.
      _path_url = '/transfers/recipients'
      _query_builder = configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      _request = BasicAuth.apply(_request, configuration)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetTransfer.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] transfer_id Required parameter: Example:
    # @return GetTransfer response from the API call
    def get_transfer_by_id(transfer_id)
      # Prepare query url.
      _path_url = '/transfers/{transfer_id}'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'transfer_id' => transfer_id
      )
      _query_builder = configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      _request = BasicAuth.apply(_request, configuration)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetTransfer.from_hash(decoded)
    end

    # Gets all transfers
    # @return ListTransfers response from the API call
    def get_transfers
      # Prepare query url.
      _path_url = '/transfers'
      _query_builder = configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      _request = BasicAuth.apply(_request, configuration)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ListTransfers.from_hash(decoded)
    end
  end
end
