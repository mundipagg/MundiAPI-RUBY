# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MundiApi
  # SubscriptionsController
  class SubscriptionsController < BaseController
    @instance = SubscriptionsController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # TODO: type endpoint description here
    # @param [String] subscription_id Required parameter: The subscription Id
    # @param [String] increment_id Required parameter: The increment Id
    # @return GetIncrementResponse response from the API call
    def get_increment_by_id(subscription_id,
                            increment_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/increments/{increment_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'increment_id' => increment_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetIncrementResponse.from_hash(decoded)
    end

    # Updates a subscription item
    # @param [String] subscription_id Required parameter: Subscription Id
    # @param [String] item_id Required parameter: Item id
    # @param [UpdateSubscriptionItemRequest] body Required parameter: Request
    # for updating a subscription item
    # @return GetSubscriptionItemResponse response from the API call
    def update_subscription_item(subscription_id,
                                 item_id,
                                 body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items/{item_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'item_id' => item_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.put(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionItemResponse.from_hash(decoded)
    end

    # Creates a usage
    # @param [String] subscription_id Required parameter: Subscription Id
    # @param [String] item_id Required parameter: Item id
    # @param [CreateUsageRequest] body Required parameter: Request for creating
    # a usage
    # @return GetUsageResponse response from the API call
    def create_usage(subscription_id,
                     item_id,
                     body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items/{item_id}/usages'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'item_id' => item_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetUsageResponse.from_hash(decoded)
    end

    # Updates the billing date from a subscription
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [UpdateSubscriptionBillingDateRequest] request Required parameter:
    # Request for updating the subscription billing date
    # @return GetSubscriptionResponse response from the API call
    def update_subscription_billing_date(subscription_id,
                                         request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/billing-date'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Updates the credit card from a subscription
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [UpdateSubscriptionCardRequest] request Required parameter: Request
    # for updating a card
    # @return GetSubscriptionResponse response from the API call
    def update_subscription_card(subscription_id,
                                 request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/card'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Creates a new subscription
    # @param [CreateSubscriptionRequest] body Required parameter: Request for
    # creating a subscription
    # @return GetSubscriptionResponse response from the API call
    def create_subscription(body)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions'
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: body.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Creates a new Subscription item
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [CreateSubscriptionItemRequest] request Required parameter: Request
    # for creating a subscription item
    # @return GetSubscriptionItemResponse response from the API call
    def create_subscription_item(subscription_id,
                                 request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionItemResponse.from_hash(decoded)
    end

    # Creates a discount
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [CreateDiscountRequest] request Required parameter: Request for
    # creating a discount
    # @return GetDiscountResponse response from the API call
    def create_discount(subscription_id,
                        request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/discounts'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetDiscountResponse.from_hash(decoded)
    end

    # Gets a subscription
    # @param [String] subscription_id Required parameter: Subscription id
    # @return GetSubscriptionResponse response from the API call
    def get_subscription(subscription_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Updates the payment method from a subscription
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [UpdateSubscriptionPaymentMethodRequest] request Required
    # parameter: Request for updating the paymentmethod from a subscription
    # @return GetSubscriptionResponse response from the API call
    def update_subscription_payment_method(subscription_id,
                                           request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/payment-method'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Deletes a discount
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [String] discount_id Required parameter: Discount Id
    # @return GetDiscountResponse response from the API call
    def delete_discount(subscription_id,
                        discount_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/discounts/{discount_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'discount_id' => discount_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetDiscountResponse.from_hash(decoded)
    end

    # Cancels a subscription
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [CreateCancelSubscriptionRequest] request Optional parameter:
    # Request for cancelling a subscription
    # @return GetSubscriptionResponse response from the API call
    def cancel_subscription(subscription_id,
                            request = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Deletes a subscription item
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [String] subscription_item_id Required parameter: Subscription item
    # id
    # @return GetSubscriptionItemResponse response from the API call
    def delete_subscription_item(subscription_id,
                                 subscription_item_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items/{subscription_item_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'subscription_item_id' => subscription_item_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionItemResponse.from_hash(decoded)
    end

    # Deletes a usage
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [String] item_id Required parameter: The subscription item id
    # @param [String] usage_id Required parameter: The usage id
    # @return GetUsageResponse response from the API call
    def delete_usage(subscription_id,
                     item_id,
                     usage_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items/{item_id}/usages/{usage_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'item_id' => item_id,
        'usage_id' => usage_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetUsageResponse.from_hash(decoded)
    end

    # Updates the metadata from a subscription
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [UpdateMetadataRequest] request Required parameter: Request for
    # updating the subscrption metadata
    # @return GetSubscriptionResponse response from the API call
    def update_subscription_metadata(subscription_id,
                                     request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/Subscriptions/{subscription_id}/metadata'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Gets all subscriptions
    # @param [Integer] page Optional parameter: Page number
    # @param [Integer] size Optional parameter: Page size
    # @param [String] code Optional parameter: Filter for subscription's code
    # @param [String] billing_type Optional parameter: Filter for subscription's
    # billing type
    # @param [String] customer_id Optional parameter: Filter for subscription's
    # customer id
    # @param [String] plan_id Optional parameter: Filter for subscription's plan
    # id
    # @param [String] card_id Optional parameter: Filter for subscription's card
    # id
    # @param [String] status Optional parameter: Filter for subscription's
    # status
    # @param [DateTime] next_billing_since Optional parameter: Filter for
    # subscription's next billing date start range
    # @param [DateTime] next_billing_until Optional parameter: Filter for
    # subscription's next billing date end range
    # @param [DateTime] created_since Optional parameter: Filter for
    # subscription's creation date start range
    # @param [DateTime] created_until Optional parameter: Filter for
    # subscriptions creation date end range
    # @return ListSubscriptionsResponse response from the API call
    def get_subscriptions(page = nil,
                          size = nil,
                          code = nil,
                          billing_type = nil,
                          customer_id = nil,
                          plan_id = nil,
                          card_id = nil,
                          status = nil,
                          next_billing_since = nil,
                          next_billing_until = nil,
                          created_since = nil,
                          created_until = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page' => page,
          'size' => size,
          'code' => code,
          'billing_type' => billing_type,
          'customer_id' => customer_id,
          'plan_id' => plan_id,
          'card_id' => card_id,
          'status' => status,
          'next_billing_since' => next_billing_since,
          'next_billing_until' => next_billing_until,
          'created_since' => created_since,
          'created_until' => created_until
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ListSubscriptionsResponse.from_hash(decoded)
    end

    # Create Usage
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [String] item_id Required parameter: Item id
    # @return GetUsageResponse response from the API call
    def create_an_usage(subscription_id,
                        item_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items/{item_id}/usages'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'item_id' => item_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetUsageResponse.from_hash(decoded)
    end

    # Get Subscription Item
    # @param [String] subscription_id Required parameter: Subscription Id
    # @param [String] item_id Required parameter: Item id
    # @return GetSubscriptionItemResponse response from the API call
    def get_subscription_item(subscription_id,
                              item_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items/{item_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'item_id' => item_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionItemResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] subscription_id Required parameter: Example:
    # @param [UpdateSubscriptionAffiliationIdRequest] request Required
    # parameter: Request for updating a subscription affiliation id
    # @return GetSubscriptionResponse response from the API call
    def update_subscription_affiliation_id(subscription_id,
                                           request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/gateway-affiliation-id'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [String] discount_id Required parameter: Example:
    # @return GetDiscountResponse response from the API call
    def get_discount_by_id(subscription_id,
                           discount_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/discounts/{discountId}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'discountId' => discount_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetDiscountResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [Integer] page Required parameter: Page number
    # @param [Integer] size Required parameter: Page size
    # @return ListDiscountsResponse response from the API call
    def get_discounts(subscription_id,
                      page,
                      size)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/discounts/'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page' => page,
          'size' => size
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ListDiscountsResponse.from_hash(decoded)
    end

    # Creates a increment
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [CreateIncrementRequest] request Required parameter: Request for
    # creating a increment
    # @return GetIncrementResponse response from the API call
    def create_increment(subscription_id,
                         request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/increments'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetIncrementResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [Integer] page Optional parameter: Page number
    # @param [Integer] size Optional parameter: Page size
    # @return ListIncrementsResponse response from the API call
    def get_increments(subscription_id,
                       page = nil,
                       size = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/increments/'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page' => page,
          'size' => size
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ListIncrementsResponse.from_hash(decoded)
    end

    # Deletes a increment
    # @param [String] subscription_id Required parameter: Subscription id
    # @param [String] increment_id Required parameter: Increment id
    # @return GetIncrementResponse response from the API call
    def delete_increment(subscription_id,
                         increment_id)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/increments/{increment_id}'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'increment_id' => increment_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetIncrementResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] subscription_id Required parameter: Subscription
    # Identifier
    # @param [String] cycle_id Optional parameter: Cycle id
    # @param [Integer] size Optional parameter: Page size
    # @param [Integer] page Optional parameter: Page number
    # @param [String] item_id Optional parameter: Identificador do item
    # @return GetUsagesDetailsResponse response from the API call
    def get_usages_details(subscription_id,
                           cycle_id = nil,
                           size = nil,
                           page = nil,
                           item_id = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/usages-details/'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'cycle_id' => cycle_id,
          'size' => size,
          'page' => page,
          'item_id' => item_id
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetUsagesDetailsResponse.from_hash(decoded)
    end

    # Lists all usages from a subscription item
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [String] item_id Required parameter: The subscription item id
    # @param [Integer] page Optional parameter: Page number
    # @param [Integer] size Optional parameter: Page size
    # @param [String] code Optional parameter: Identification code in the client
    # system
    # @param [String] group Optional parameter: Identification group in the
    # client system
    # @return ListUsagesResponse response from the API call
    def get_usages(subscription_id,
                   item_id,
                   page = nil,
                   size = nil,
                   code = nil,
                   group = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items/{item_id}/usages'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id,
        'item_id' => item_id
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page' => page,
          'size' => size,
          'code' => code,
          'group' => group
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ListUsagesResponse.from_hash(decoded)
    end

    # Get Subscription Items
    # @param [String] subscription_id Required parameter: The subscription id
    # @param [Integer] page Optional parameter: Page number
    # @param [Integer] size Optional parameter: Page size
    # @param [String] name Optional parameter: The item name
    # @param [String] code Optional parameter: Identification code in the client
    # system
    # @param [String] status Optional parameter: The item statis
    # @param [String] description Optional parameter: The item description
    # @param [String] created_since Optional parameter: Filter for item's
    # creation date start range
    # @param [String] created_until Optional parameter: Filter for item's
    # creation date end range
    # @return ListSubscriptionItemsResponse response from the API call
    def get_subscription_items(subscription_id,
                               page = nil,
                               size = nil,
                               name = nil,
                               code = nil,
                               status = nil,
                               description = nil,
                               created_since = nil,
                               created_until = nil)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/items'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'page' => page,
          'size' => size,
          'name' => name,
          'code' => code,
          'status' => status,
          'description' => description,
          'created_since' => created_since,
          'created_until' => created_until
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      ListSubscriptionItemsResponse.from_hash(decoded)
    end

    # Updates the boleto due days from a subscription
    # @param [String] subscription_id Required parameter: Subscription Id
    # @param [UpdateSubscriptionDueDaysRequest] request Required parameter:
    # Example:
    # @return GetSubscriptionResponse response from the API call
    def update_subscription_due_days(subscription_id,
                                     request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/boleto-due-days'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end

    # Atualização do valor mínimo da assinatura
    # @param [String] subscription_id Required parameter: Subscription Id
    # @param [UpdateSubscriptionMinimumPriceRequest] request Required parameter:
    # Request da requisição com o valor mínimo que será configurado
    # @return GetSubscriptionResponse response from the API call
    def update_subscription_minium_price(subscription_id,
                                         request)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/subscriptions/{subscription_id}/minimum_price'
      _query_builder = APIHelper.append_url_with_template_parameters(
        _query_builder,
        'subscription_id' => subscription_id
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.patch(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      GetSubscriptionResponse.from_hash(decoded)
    end
  end
end
